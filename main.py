import aiosqlite
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F
import json
from datetime import datetime

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.json
def load_config():
    try:
        with open("config.json", "r") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logging.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json: %s", e)
        raise


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = load_config()

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=config["API_TOKEN"])
dp = Dispatcher()

# –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_NAME = 'quiz_bot.db'

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–≤–∏–∑–∞
quiz_data = {
    1: [
        {'question': '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?', 'options': ['3', '4', '5', '6'], 'correct_option': 1},
        {'question': '–ß–µ–º—É —Ä–∞–≤–µ–Ω –∫–æ—Ä–µ–Ω—å –∏–∑ 9?', 'options': ['1', '2', '3', '4'], 'correct_option': 2},
        {'question': '–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –ø—Ä—è–º–æ–º —É–≥–ª–µ?', 'options': ['45', '90', '180', '360'], 'correct_option': 1},
        {'question': '–ß–µ–º—É —Ä–∞–≤–µ–Ω 5 * 5?', 'options': ['10', '20', '25', '30'], 'correct_option': 2},
        {'question': '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 10 - 3?', 'options': ['5', '6', '7', '8'], 'correct_option': 2},
        {'question': '–ß–µ–º—É —Ä–∞–≤–Ω–∞ —Å—É–º–º–∞ —É–≥–ª–æ–≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞?', 'options': ['90', '180', '270', '360'],
         'correct_option': 1},
        {'question': '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 15 / 3?', 'options': ['3', '5', '7', '9'], 'correct_option': 1},
        {'question': '–ß–µ–º—É —Ä–∞–≤–µ–Ω –∫–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞ 4?', 'options': ['8', '12', '16', '20'], 'correct_option': 2},
        {'question': '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–∑–æ–∫, —Å–æ–µ–¥–∏–Ω—è—é—â–∏–π –¥–≤–µ —Ç–æ—á–∫–∏ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏?',
         'options': ['–†–∞–¥–∏—É—Å', '–î–∏–∞–º–µ—Ç—Ä', '–•–æ—Ä–¥–∞', '–ö–∞—Å–∞—Ç–µ–ª—å–Ω–∞—è'], 'correct_option': 2},
        {'question': '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 7 + 6?', 'options': ['11', '12', '13', '14'], 'correct_option': 2}
    ],
    2: [
        {'question': '–ß–µ–º—É —Ä–∞–≤–µ–Ω 2^5?', 'options': ['16', '32', '64', '128'], 'correct_option': 1},
        {'question': '–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–Ω–µ–π —É –∫—É–±–∞?', 'options': ['4', '6', '8', '12'], 'correct_option': 1},
        {'question': '–ß–µ–º—É —Ä–∞–≤–µ–Ω —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ 4?', 'options': ['24', '12', '6', '4'], 'correct_option': 0},
        {'question': '–ß–µ–º—É —Ä–∞–≤–µ–Ω –ª–æ–≥–∞—Ä–∏—Ñ–º 100 –ø–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—é 10?', 'options': ['1', '2', '10', '100'],
         'correct_option': 1},
        {'question': '–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: x + 5 = 12. –ß–µ–º—É —Ä–∞–≤–µ–Ω x?', 'options': ['5', '7', '10', '12'],
         'correct_option': 1},
        {'question': '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 3 * 3 * 3?', 'options': ['9', '18', '27', '81'], 'correct_option': 2},
        {'question': '–ö–∞–∫–æ–µ —á–∏—Å–ª–æ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 2, 3 –∏ 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ?', 'options': ['10', '15', '30', '60'],
         'correct_option': 2},
        {'question': '–ß–µ–º—É —Ä–∞–≤–µ–Ω —Å–∏–Ω—É—Å 90 –≥—Ä–∞–¥—É—Å–æ–≤?', 'options': ['0', '1', '0.5', '-1'], 'correct_option': 1},
        {'question': '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∫–æ—Ä–µ–Ω—å –∏–∑ 81?', 'options': ['9', '8', '7', '6'], 'correct_option': 0},
        {'question': '–ß–µ–º—É —Ä–∞–≤–Ω–∞ —Å—É–º–º–∞ –≤—Å–µ—Ö —É–≥–ª–æ–≤ –∫–≤–∞–¥—Ä–∞—Ç–∞?', 'options': ['180', '360', '540', '720'],
         'correct_option': 1}
    ],
    3: [
        {'question': '–ß–µ–º—É —Ä–∞–≤–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–∏ f(x) = x^2?', 'options': ['x', '2x', 'x^2', '2'],
         'correct_option': 1},
        {'question': '–ò–Ω—Ç–µ–≥—Ä–∞–ª –æ—Ç x dx —Ä–∞–≤–µ–Ω:', 'options': ['x^2/2 + C', 'x^2 + C', '2x + C', 'x + C'],
         'correct_option': 0},
        {'question': '–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2x = 8. –ß–µ–º—É —Ä–∞–≤–µ–Ω x?', 'options': ['2', '3', '4', '8'], 'correct_option': 2},
        {'question': '–ß–µ–º—É —Ä–∞–≤–Ω–∞ –¥–ª–∏–Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ —Ä–∞–¥–∏—É—Å–∞ R?', 'options': ['pi*R^2', '2*pi*R', 'pi*R', 'R^2'],
         'correct_option': 1},
        {'question': '–ß–µ–º—É —Ä–∞–≤–Ω–∞ —Å—É–º–º–∞ —Ä—è–¥–∞ 1 + 2 + 3 + ... + 100?', 'options': ['5050', '5000', '505', '1000'],
         'correct_option': 0},
        {'question': '–ß–µ–º—É —Ä–∞–≤–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è sin(x)?', 'options': ['cos(x)', '-sin(x)', 'sin(x)', '-cos(x)'],
         'correct_option': 0},
        {'question': '–ß–µ–º—É —Ä–∞–≤–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∞–ª –æ—Ç 1/x dx?', 'options': ['ln(x) + C', '1/x + C', 'x + C', 'ln|x| + C'],
         'correct_option': 3},
        {'question': '–ß–µ–º—É —Ä–∞–≤–µ–Ω –∫–æ—Ä–µ–Ω—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è x^2 - 9 = 0?', 'options': ['3', '-3', '3 –∏ -3', '0'],
         'correct_option': 2},
        {'question': '–ß–µ–º—É —Ä–∞–≤–µ–Ω –ø—Ä–µ–¥–µ–ª —Ñ—É–Ω–∫—Ü–∏–∏ 1/x –ø—Ä–∏ x —Å—Ç—Ä–µ–º—è—â–µ–º—Å—è –∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏?',
         'options': ['0', '1', '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å', '-1'], 'correct_option': 0},
        {'question': '–ö–∞–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞–ª –Ω–∞–∑—ã–≤–∞—é—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º?',
         'options': ['–ò–Ω—Ç–µ–≥—Ä–∞–ª —Å –≤–µ—Ä—Ö–Ω–∏–º –∏ –Ω–∏–∂–Ω–∏–º –ø—Ä–µ–¥–µ–ª–æ–º', '–ò–Ω—Ç–µ–≥—Ä–∞–ª –±–µ–∑ –ø—Ä–µ–¥–µ–ª–æ–≤', '–ò–Ω—Ç–µ–≥—Ä–∞–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π',
                     '–ò–Ω—Ç–µ–≥—Ä–∞–ª —Å –æ–¥–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü—ã'], 'correct_option': 0}
    ]
}


def generate_options_keyboard(answer_options, correct_index):
    builder = InlineKeyboardBuilder()
    for i, option in enumerate(answer_options):
        builder.add(
            types.InlineKeyboardButton(
                text=option,
                callback_data=f"answer_{i}"
            )
        )
    builder.adjust(1)
    return builder.as_markup()


async def get_user_state(user_id):
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute('SELECT question_index, level, correct_count FROM quiz_state WHERE user_id = ?',
                              (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result:
                return result[0], result[1], result[2]
            return 0, None, 0


async def update_user_state(user_id, question_index=None, level=None, correct_count=None):
    current_question_index, current_level, current_correct = await get_user_state(user_id)
    if question_index is None:
        question_index = current_question_index
    if level is None:
        level = current_level
    if correct_count is None:
        correct_count = current_correct
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            'INSERT OR REPLACE INTO quiz_state (user_id, question_index, level, correct_count) VALUES (?, ?, ?, ?)',
            (user_id, question_index, level, correct_count))
        await db.commit()


async def save_user_answer(user_id, question_index, user_answer, correct):
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            'INSERT OR REPLACE INTO quiz_user_answers (user_id, question_index, user_answer, correct) VALUES (?, ?, ?, ?)',
            (user_id, question_index, user_answer, 1 if correct else 0))
        await db.commit()


async def get_user_answers(user_id):
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute(
                'SELECT question_index, user_answer, correct FROM quiz_user_answers WHERE user_id = ? ORDER BY question_index',
                (user_id,)) as cursor:
            return await cursor.fetchall()


@dp.callback_query(F.data.startswith("answer_"))
async def handle_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    current_question_index, current_level, correct_count = await get_user_state(user_id)
    if current_level is None or current_question_index >= len(quiz_data[current_level]):
        await callback.message.answer("–ö–≤–∏–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return

    chosen_str = callback.data.split("_")[1]
    chosen_index = int(chosen_str)

    await callback.bot.edit_message_reply_markup(
        chat_id=user_id,
        message_id=callback.message.message_id,
        reply_markup=None
    )

    question_data = quiz_data[current_level][current_question_index]
    correct_option = question_data['correct_option']
    user_answer = question_data['options'][chosen_index]
    correct_answer = question_data['options'][correct_option]

    is_correct = (chosen_index == correct_option)
    if is_correct:
        correct_count += 1
        await callback.message.answer(f"‚úÖ –í–µ—Ä–Ω–æ! –í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}")
    else:
        await callback.message.answer(f"üö´ –ù–µ–≤–µ—Ä–Ω–æ! –í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_user_answer(user_id, current_question_index, user_answer, is_correct)

    current_question_index += 1
    await update_user_state(user_id, question_index=current_question_index, correct_count=correct_count)

    if current_question_index < len(quiz_data[current_level]):
        await get_question(callback.message, user_id)
    else:
        total_questions = len(quiz_data[current_level])
        await save_result(user_id, correct_count, current_level)
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_text = await generate_result_table(user_id, current_level, correct_count, total_questions)
        await callback.message.answer(result_text)


@dp.callback_query(F.data.startswith("level_"))
async def choose_level(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        chosen_level = int(callback.data.split("_")[1])
        if chosen_level not in quiz_data:
            await callback.message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        await callback.bot.edit_message_reply_markup(
            chat_id=user_id,
            message_id=callback.message.message_id,
            reply_markup=None
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞ –∏ —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        await update_user_state(user_id, question_index=0, level=chosen_level, correct_count=0)
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        await clear_user_answers(user_id)
        await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {chosen_level}. –ù–∞—á–Ω–µ–º –∏–≥—Ä—É!")
        await new_quiz(callback.message, user_id)
    except ValueError:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.")


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="\ud83c\udfae –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
            callback_data="start_game"
        )
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑!", reply_markup=builder.as_markup())


@dp.callback_query(F.data == "start_game")
async def start_game(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    # –ü—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="\u2b50 –õ–µ–≥–∫–∏–π",
            callback_data="level_1"
        ),
        types.InlineKeyboardButton(
            text="\ud83d\udd25 –°—Ä–µ–¥–Ω–∏–π",
            callback_data="level_2"
        ),
        types.InlineKeyboardButton(
            text="\ud83c\udf0c –°–ª–æ–∂–Ω—ã–π",
            callback_data="level_3"
        )
    )
    await callback.bot.edit_message_reply_markup(
        chat_id=user_id,
        message_id=callback.message.message_id,
        reply_markup=None
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=builder.as_markup())


async def get_question(message, user_id):
    current_question_index, current_level, correct_count = await get_user_state(user_id)
    if current_level is None:
        await message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å: —É—Ä–æ–≤–µ–Ω—å –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return
    if current_question_index >= len(quiz_data[current_level]):
        await message.answer("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return

    question_data = quiz_data[current_level][current_question_index]
    correct_index = question_data['correct_option']
    opts = question_data['options']
    kb = generate_options_keyboard(opts, correct_index)
    await message.answer(question_data['question'], reply_markup=kb)


async def new_quiz(message, user_id):
    await get_question(message, user_id)


async def save_result(user_id, correct_count, level):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É quiz_results
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            'INSERT OR REPLACE INTO quiz_results (user_id, last_score, last_level, last_played) VALUES (?, ?, ?, ?)',
            (user_id, correct_count, level, timestamp))
        await db.commit()


@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute('SELECT last_score, last_level, last_played FROM quiz_results WHERE user_id = ?',
                              (user_id,)) as cursor:
            result = await cursor.fetchone()
            if result:
                last_score, last_level, last_played = result
                total_questions = len(quiz_data.get(last_level, []))
                await message.answer(f"–í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
                                     f"–£—Ä–æ–≤–µ–Ω—å: {last_level}\n"
                                     f"–°—á–µ—Ç: {last_score}/{total_questions}\n"
                                     f"–ü—Ä–æ–π–¥–µ–Ω–æ: {last_played}")
            else:
                await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑!")


async def generate_result_table(user_id, level, correct_count, total_questions):
    user_answers = await get_user_answers(user_id)
    # user_answers: [(question_index, user_answer, correct), ...]

    result_lines = [
        "–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!",
        f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct_count}/{total_questions}\n",
        "–í–æ—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:",
        # –ü—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–í–æ–ø—Ä–æ—Å) –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é, –ª–µ–≤—ã–π (–†–µ–∑—É–ª—å—Ç–∞—Ç) –ø–æ —Ü–µ–Ω—Ç—Ä—É
        "| –í–æ–ø—Ä–æ—Å | –†–µ–∑—É–ª—å—Ç–∞—Ç |",
        "|-------:|:---------:|"
    ]

    for (q_idx, u_ans, correct) in user_answers:
        question_number = f"{q_idx+1:02d}"  # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä 01, 02...10
        result_mark = "‚úÖ" if correct == 1 else "‚ùå"
        result_lines.append(f"| {question_number} | {result_mark} |")

    return "\n".join(result_lines)



async def clear_user_answers(user_id):
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute('DELETE FROM quiz_user_answers WHERE user_id = ?', (user_id,))
        await db.commit()


async def create_table():
    async with aiosqlite.connect(DB_NAME) as db:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–∏–∑–∞
        await db.execute(
            '''CREATE TABLE IF NOT EXISTS quiz_state (
                user_id INTEGER PRIMARY KEY,
                question_index INTEGER,
                level INTEGER,
                correct_count INTEGER
            )'''
        )
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await db.execute(
            '''CREATE TABLE IF NOT EXISTS quiz_results (
                user_id INTEGER PRIMARY KEY,
                last_score INTEGER,
                last_level INTEGER,
                last_played TEXT
            )'''
        )
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å
        await db.execute(
            '''CREATE TABLE IF NOT EXISTS quiz_user_answers (
                user_id INTEGER,
                question_index INTEGER,
                user_answer TEXT,
                correct INTEGER,
                PRIMARY KEY(user_id, question_index)
            )'''
        )
        await db.commit()


async def main():
    await create_table()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
